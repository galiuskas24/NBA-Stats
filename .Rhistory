knitr::opts_chunk$set(echo = TRUE)
require(dplyr)
require(gridExtra)
require(car)
require(bootstrap)
require(ggplot2)
set.seed(42)
players.bySeasons <- read.csv("nba-players-stats/Seasons_Stats.csv")
players.bySeasons.info <- read.csv("nba-players-stats/Players.csv")
graph.col = "deepskyblue"
pos.labels = c("PG", "SG", "SF", "PF", "C")
pos.colors = c("lightgreen", "darkturquoise", "firebrick1", "burlywood4", "yellow3")
# ---------------------------------- Utility functions ---------------------------------- #
#' Function which calculates a confidence interval for bootstrap sample.
#' @param x first population
#' @param y second population (optional)
#' @param B number of bootstrap replicas (# of samples)
#' @param alpha level of significance
#' @param alternative two sided or specific one sided test? possible options: 'two.sided', 'greater', 'less'
#' @param f function applied on bootstrap samples
#' @return vector containing lower and upper bound of confidence interval or NULL in case of invalid input
#' @examples
#' bs.intreval(players, B = 1000, alternative = "greater")
#' bs.intreval(x = players, y = HOF.players, alpha = 0.01, alternative = "greater")
bs.interval <- function(x, y = NULL, B = 1E5, alpha = 0.05, alternative = "two.sided", f = mean) {
boot = bootstrap(x, B, f)$thetastar
if(!is.null(y)) {
boot = boot - bootstrap(y, B, f)$thetastar
}
boot = sort(boot)
if(alternative == "two.sided") {
return (c(boot[B*alpha/2], boot[B*(1-alpha/2)]))
} else if(alternative == "greater") {
return (c(boot[B*alpha], +Inf))
} else if(alternative == "less") {
return (c(-Inf, boot[B*(1-alpha)]))
}
return (NULL)
}
#' Function which prints Bootstrap interval.
#' @param interval Bootstrap interval
#' @param precision decimal precision
#' @return nothing
#' @examples
#' print.bs.interval(interval)
#' print.bs.interval(interval, precision = 2)
print.bs.interval <- function(interval, precision = 5) {
lower.bound = round(interval[1], digits = precision)
upper.bound = round(interval[2], digits = precision)
message("Interval povjerenja jednak je: [", lower.bound, ", ", upper.bound, "].")
}
#' Function which standardizes some random variable (calculates z-score).
#' @param varible random variable to standardize
#' @return nothing
#' @examples
#' standardize(player.points)
standardize <- function(variable){
return((variable - mean(variable)) / sd(variable))
}
#' @param players list of players dataframe
#' @param player_names vector of player names
#' @param colors vector of colors
#' @param columns vector of category names
#' @param values vector of important vertical lines to show (mean, median,..)
#' @return nothing
#' @example
#' custom.ggplot(
#'  list(bryant, jordan, james, durant),
#'  c("Bryant", "Jordan", "James", "Durant"),
#'  c("#a00e0e", "#e5aa22", "#2260e5", "#330547"),
#'  c("Points", "Asists", "Rebounds", "Turnovers", "Steals", "+/-"),
#'  c(points, asists, rebounds, turnovers, steals, plus.minus)
#' )
custom.ggplot <- function(players, player_names, colors, columns, values){
Variable <- factor(rep(columns, rep(length(players),length(columns))))
Legend <- factor(rep(player_names, length(columns)))
data <- data.frame(Variable,Legend, values)
ggplot(data, aes(x=Variable, y=values,fill=Legend, colour=Legend)) +
geom_bar(stat="identity", position="dodge")+
scale_color_manual(values=rep("black", length(players))) +
scale_fill_manual(values=rev(colors))
}
players.bySeasons %>% select(Player, G) %>%
na.omit %>%
group_by(Player) %>%
summarise(Games=sum(G)) -> players.with.g
read.csv("nba-players-stats/player_data.csv") %>%
select(Player=name, year_start, year_end) %>%
na.omit -> all.players
all.players$year_start <- all.players$year_end - all.players$year_start +1
merge(players.with.g, all.players) -> all.players
# all.players <- all.players[all.players$Games < 700 | all.players$year_start > 5 ,]
plot(all.players$year_start~all.players$Games, xlab = "Broj utakmica igrača", ylab = "Trajanje karijere igrača (god.)")
fit = lm(all.players$year_start ~ all.players$Games)
summary(fit)
knitr::opts_chunk$set(echo = TRUE)
require(dplyr)
require(gridExtra)
require(car)
require(bootstrap)
require(ggplot2)
set.seed(42)
players.bySeasons <- read.csv("nba-players-stats/Seasons_Stats.csv")
players.bySeasons.info <- read.csv("nba-players-stats/Players.csv")
graph.col = "deepskyblue"
pos.labels = c("PG", "SG", "SF", "PF", "C")
pos.colors = c("lightgreen", "darkturquoise", "firebrick1", "burlywood4", "yellow3")
# ---------------------------------- Utility functions ---------------------------------- #
#' Function which calculates a confidence interval for bootstrap sample.
#' @param x first population
#' @param y second population (optional)
#' @param B number of bootstrap replicas (# of samples)
#' @param alpha level of significance
#' @param alternative two sided or specific one sided test? possible options: 'two.sided', 'greater', 'less'
#' @param f function applied on bootstrap samples
#' @return vector containing lower and upper bound of confidence interval or NULL in case of invalid input
#' @examples
#' bs.intreval(players, B = 1000, alternative = "greater")
#' bs.intreval(x = players, y = HOF.players, alpha = 0.01, alternative = "greater")
bs.interval <- function(x, y = NULL, B = 1E5, alpha = 0.05, alternative = "two.sided", f = mean) {
boot = bootstrap(x, B, f)$thetastar
if(!is.null(y)) {
boot = boot - bootstrap(y, B, f)$thetastar
}
boot = sort(boot)
if(alternative == "two.sided") {
return (c(boot[B*alpha/2], boot[B*(1-alpha/2)]))
} else if(alternative == "greater") {
return (c(boot[B*alpha], +Inf))
} else if(alternative == "less") {
return (c(-Inf, boot[B*(1-alpha)]))
}
return (NULL)
}
#' Function which prints Bootstrap interval.
#' @param interval Bootstrap interval
#' @param precision decimal precision
#' @return nothing
#' @examples
#' print.bs.interval(interval)
#' print.bs.interval(interval, precision = 2)
print.bs.interval <- function(interval, precision = 5) {
lower.bound = round(interval[1], digits = precision)
upper.bound = round(interval[2], digits = precision)
message("Interval povjerenja jednak je: [", lower.bound, ", ", upper.bound, "].")
}
#' Function which standardizes some random variable (calculates z-score).
#' @param varible random variable to standardize
#' @return nothing
#' @examples
#' standardize(player.points)
standardize <- function(variable){
return((variable - mean(variable)) / sd(variable))
}
#' @param players list of players dataframe
#' @param player_names vector of player names
#' @param colors vector of colors
#' @param columns vector of category names (for comparation)
#' @param values vector of important vertical lines to show (mean, median,..)
#' @return ggplot
#' @example
#' custom.ggplot(
#'  list(bryant, jordan, james, durant),
#'  c("Bryant", "Jordan", "James", "Durant"),
#'  c("#a00e0e", "#e5aa22", "#2260e5", "#330547"),
#'  c("Points", "Asists", "Rebounds", "Turnovers", "Steals", "+/-"),
#'  c(points, asists, rebounds, turnovers, steals, plus.minus)
#' )
custom.ggplot <- function(players, player_names, colors, columns, values){
Variable <- factor(rep(columns, rep(length(players),length(columns))))
Legend <- factor(rep(player_names, length(columns)))
data <- data.frame(Variable,Legend, values)
ggplot(data, aes(x=Variable, y=values,fill=Legend, colour=Legend)) +
geom_bar(stat="identity", position="dodge")+
scale_color_manual(values=rep("black", length(players))) +
scale_fill_manual(values=rev(colors))
}
fit = lm(players$X3sum ~ players$X2sum)
players.bySeasons %>% select(Player, G) %>%
na.omit %>%
group_by(Player) %>%
summarise(Games=sum(G)) -> players.with.g
read.csv("nba-players-stats/player_data.csv") %>%
select(Player=name, year_start, year_end) %>%
na.omit -> all.players
all.players$year_start <- all.players$year_end - all.players$year_start +1
merge(players.with.g, all.players) -> all.players
# all.players <- all.players[all.players$Games < 700 | all.players$year_start > 5 ,]
plot(all.players$year_start~all.players$Games, xlab = "Broj utakmica igrača", ylab = "Trajanje karijere igrača (god.)")
fit = lm(all.players$year_start ~ all.players$Games)
summary(fit)
players.bySeasons %>% select(Player, G) %>%
na.omit %>%
group_by(Player) %>%
summarise(Games=sum(G)) -> players.with.g
read.csv("nba-players-stats/player_data.csv") %>%
select(Player=name, year_start, year_end) %>%
na.omit -> all.players
all.players$year_start <- all.players$year_end - all.players$year_start +1
merge(players.with.g, all.players) -> all.players
# all.players <- all.players[all.players$Games < 700 | all.players$year_start > 5 ,]
plot(all.players$Games~all.players$year_start, xlab = "Broj utakmica igrača", ylab = "Trajanje karijere igrača (god.)")
fit = lm(all.players$year_start ~ all.players$Games)
summary(fit)
players.bySeasons %>% select(Player, G) %>%
na.omit %>%
group_by(Player) %>%
summarise(Games=sum(G)) -> players.with.g
read.csv("nba-players-stats/player_data.csv") %>%
select(Player=name, year_start, year_end) %>%
na.omit -> all.players
all.players$year_start <- all.players$year_end - all.players$year_start +1
merge(players.with.g, all.players) -> all.players
# all.players <- all.players[all.players$Games < 700 | all.players$year_start > 5 ,]
plot(all.players$Games~all.players$year_start, ylab = "Broj utakmica igrača", xlab = "Trajanje karijere igrača (god.)")
fit = lm(all.players$year_start ~ all.players$Games)
summary(fit)
custom.ggplot(
list(bryant, jordan, james, durant),
c("Bryant", "Jordan", "James", "Durant"),
c("#a00e0e", "#e5aa22", "#2260e5", "#330547"),
c("NBA Champ.", "MVP Titles", "All Star", "Scoring Champ."),
c(nba.titles, mvp.titles, all.star.selection, scoring.titles)
)+
ylab("Frekvencija") +
xlab("Kategorije")+
ggtitle("Prikaz individualnih uspjeha igrača") +
theme(plot.title = element_text(hjust = 0.5))
read.csv("players/pre/kobe_career_pre.csv")%>% select(PTS, AST, TRB, TOV, STL, FG., X3P., GmSc) %>% na.omit -> bryant
read.csv("players/pre/jordan_career_pre.csv")%>% select(PTS, AST, TRB, TOV, STL, FG., X3P., GmSc) %>% na.omit -> jordan
read.csv("players/pre/james_career_pre.csv")%>% select(PTS, AST, TRB, TOV, STL, FG., X3P., GmSc) %>% na.omit -> james
read.csv("players/pre/durant_career_pre.csv")%>% select(PTS, AST, TRB, TOV, FG., STL, X3P., GmSc) %>% na.omit -> durant
# Calculate basic stats
points<-c(mean(bryant$PTS), mean(jordan$PTS), mean(james$PTS), mean(durant$PTS))
asists<-c(mean(bryant$AST), mean(jordan$AST), mean(james$AST), mean(durant$AST))
rebounds<-c(mean(bryant$TRB), mean(jordan$TRB), mean(james$TRB), mean(durant$TRB))
turnovers<-c(mean(bryant$TOV), mean(jordan$TOV), mean(james$TOV), mean(durant$TOV))
steals<-c(mean(bryant$STL), mean(jordan$STL), mean(james$STL), mean(durant$STL))
plus.minus<-c(mean(bryant$GmSc), mean(jordan$GmSc), mean(james$GmSc), mean(durant$GmSc))
nba.titles<-c(5,6,3,2)
mvp.titles<-c(1,5,4,1)
all.star.selection <-c(18,14,15,10)
scoring.titles<-c(2,10,1,4)
custom.ggplot(
list(bryant, jordan, james, durant),
c("Bryant", "Jordan", "James", "Durant"),
c("#a00e0e", "#e5aa22", "#2260e5", "#330547"),
c("Points", "Asists", "Rebounds", "Turnovers", "Steals", "+/-"),
c(points, asists, rebounds, turnovers, steals, plus.minus)
)+
ylab("Prosječan iznos po utakmici") +
xlab("Kategorije")+
ggtitle("Prikaz efikasnosti igrača po kategorijama") +
theme(plot.title = element_text(hjust = 0.5))
custom.ggplot(
list(bryant, jordan, james, durant),
c("Bryant", "Jordan", "James", "Durant"),
c("#a00e0e", "#e5aa22", "#2260e5", "#330547"),
c("NBA Champ.", "MVP Titles", "All Star", "Scoring Champ."),
c(nba.titles, mvp.titles, all.star.selection, scoring.titles)
)+
ylab("Frekvencija") +
xlab("Kategorije")+
ggtitle("Prikaz individualnih uspjeha igrača") +
theme(plot.title = element_text(hjust = 0.5))
bryant$ID <- seq.int(nrow(bryant))
jordan$ID <- seq.int(nrow(jordan))
james$ID <- seq.int(nrow(james))
durant$ID <- seq.int(nrow(durant))
jordan$Legend = "Jordan"
bryant$Legend ="Bryant"
james$Legend="James"
durant$Legend="Durant"
goat.players = rbind(bryant, jordan, james, durant)
vline.data <- data.frame(ID=c("Bryant", "Jordan", "James", "Durant"),
means=c(mean(bryant$PTS), mean(jordan$PTS),mean(james$PTS),mean(durant$PTS)) )
ggplot(goat.players, aes(x=PTS, colour=Legend)) +
geom_density(aes(y = ..count..))+
geom_vline(data=vline.data, aes(xintercept=means, colour=ID),linetype="dashed", size=0.5)+
ylab("Frekvencija") +
xlab("Poena po utakmici")+
ggtitle("Razdioba poena za sve utakmice") +
theme(plot.title = element_text(hjust = 0.5))
kobe_zoom <- bryant[bryant$PTS > 40,]
jordan_zoom <- jordan[jordan$PTS > 40,]
james_zoom <- james[james$PTS > 40,]
durant_zoom <- durant[durant$PTS > 40,]
goat.players = rbind(kobe_zoom, jordan_zoom, james_zoom, durant_zoom)
ggplot(goat.players, aes(x=PTS, colour=Legend)) +
geom_density(aes(y = ..count..))+
ylab("Frekvencija") +
xlab("Poena po utakmici")+
ggtitle("Razdioba poena za sve utakmice") +
theme(plot.title = element_text(hjust = 0.5))
boxplot(bryant$FG., jordan$FG., james$FG., durant$FG.,
names = c("Bryant", "Jordan", "James", "Durant"),
ylab = "Postotak šuta za sve utakmice (FG%)",
col = pos.colors)
boxplot(bryant$X3P., jordan$X3P., james$X3P., durant$X3P.,
names = c("Bryant", "Jordan", "James", "Durant"),
ylab = "Postotak šuta za sve utakmice (3P%)",
col = pos.colors)
